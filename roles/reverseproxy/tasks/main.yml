---
- name: Install Nginx
  ansible.builtin.package:
    name: nginx
    state: present
  become: true
- name: "Generate dhparams file"
  ansible.builtin.command:
    cmd: "openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048"
    creates: "/etc/ssl/certs/dhparam.pem"
  become: true
  notify: Restart Nginx
- name: "SSL Config"
  ansible.builtin.copy:
    src: ssl.conf
    dest: /etc/nginx/snippets/ssl.conf
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: Restart Nginx
- name: "Nginx Reverse Proxy Config"
  ansible.builtin.template:
    src: reverseproxy.j2
    dest: "/etc/nginx/sites-enabled/{{ item['server_names'][0] }}.conf"
    owner: root
    group: root
    mode: '0644'
  with_items: "{{ reverseproxy_sites }}"
  become: true
  notify: Restart Nginx
- name: Define expected Nginx site config files
  ansible.builtin.set_fact:
    nginx_expected_site_files: |-
      {{ reverseproxy_sites | map(attribute='server_names') | map('first') | map('regex_replace', '^(.*)$', '/etc/nginx/sites-enabled/\1.conf') | list }}
- name: Get existing Nginx site config files in sites-enabled
  ansible.builtin.find:
    paths: /etc/nginx/sites-enabled
    patterns: '*'
    file_type: file
  register: nginx_current_site_files
- name: Delete unmanaged Nginx site configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  become: true
  loop: "{{ nginx_current_site_files.files | map(attribute='path') | reject('in', nginx_expected_site_files) }}"
  notify: Restart Nginx
- name: "Certbot Deploy Script"
  ansible.builtin.copy:
    src: certbot-deploy-hook.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/nginx.sh
    owner: root
    group: root
    mode: '0755'
  become: true
- name: Ensure Nginx is running
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true
  become: true
