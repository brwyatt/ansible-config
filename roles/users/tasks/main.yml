---
- name: Manage root User
  ansible.builtin.user:
    name: "root"
    password: >-
      {{
        users_root_password | string | password_hash(
          'sha512',
          lookup(
            'ansible.builtin.password',
            '/dev/null',
            chars=["ascii_letters", "digits"],
            seed='root@'+inventory_hostname,
            length=16,
          ),
        ) if users_root_password
        and not users_disable_root_login
        else "*"
      }}
  when: users_manage_root
  become: true
- name: Manage root SSH Keys
  ansible.builtin.authorized_key:
    user: "root"
    key: "{{ ((users_admins | map('extract', users_list) | map(attribute='ssh_pub_keys') | flatten) + (users_extra_root_keys | default([]))) | join('\n') }}"
    state: "{{ 'absent' if users_disable_root_login else 'present' }}"
    exclusive: true
    manage_dir: true
  when: users_manage_root
  become: true
- name: Manage Users
  ansible.builtin.user:
    name: "{{ item }}"
    password: >-
      {{
        users_list[item].password | string | password_hash(
          'sha512',
          lookup(
            'ansible.builtin.password',
            '/dev/null',
            chars=["ascii_letters", "digits"],
            seed=item+'@'+inventory_hostname,
            length=16,
          ),
        ) if users_list[item].password is defined
        else "*"
      }}
    state: "{{ 'present' if (users_include == 'all' or item in users_include) and item not in users_exclude else 'absent' }}"
    shell: "{{ users_list[item].shell | default(users_default_shell) }}"
    groups: "{{ users_list[item].groups | default([]) | join(',') }}"
    append: true
  loop: "{{ users_list.keys() }}"
  loop_control:
    label: "User {{ item }}"
  register: result
  failed_when:
    - result is failed
    - result.rc != 6
  become: true
- name: Manage User SSH Keys
  ansible.builtin.authorized_key:
    user: "{{ item }}"
    key: "{{ users_list[item].ssh_pub_keys | default([]) | join('\n') }}"
    state: "present"
    exclusive: true
    manage_dir: true
  loop: "{{ (users_list.keys() if users_include == 'all' else users_list.keys() | select('in', users_include)) | reject('in', users_exclude) | list }}"
  loop_control:
    label: "User {{ item }}"
  become: true
- name: Manage sudoers files for admin users
  ansible.builtin.template:
    src: admin_sudoers_d.j2
    dest: "/etc/sudoers.d/admin_{{ item }}"
    owner: root
    group: root
    mode: '0440'
  vars:
    user_name: "{{ item }}"
  when: "item in users_admins and (users_include == 'all' or item in users_include) and item not in users_exclude"
  loop: "{{ users_list.keys() }}"
  loop_control:
    label: "User {{ item }}"
  become: true
- name: Delete non-admin users sudoer files
  ansible.builtin.file:
    path: "/etc/sudoers.d/admin_{{ item }}"
    state: absent
  when: "item not in users_admins"
  loop: "{{ users_list.keys() }}"
  loop_control:
    label: "User {{ item }}"
  become: true
- name: Delete Cloud Init Sudoers
  ansible.builtin.file:
    path: "/etc/sudoers.d/90-cloud-init-users"
    state: absent
  when: "users_delete_cloud_init_sudoers"
  become: true
